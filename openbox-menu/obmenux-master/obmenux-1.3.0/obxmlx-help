module obxmlx:
version: 1.3
class ObMenux:
 
 ObMenux.newMenu()
 	Initializes a new menu.
 ObMenux.newPipe()
 	Initializes a new pipe.
 ObMenux.loadMenu(filename)
 	Loads an existing menu file.
	
NOTE: It's necessary to call one of the above before doing anything else.
	
 ObMenux.saveMenu(filename)
 
 ObMenux.printXml()
 
 ObMenux.getXml()
 
 ___________________________
 
 menu: The ID of the menu you want to modify. If None, the root menu will
 be modified.
 num: The position of the item in its submenu, starting at 0.
 pos: Ditto.
 
 ObMenux.removeItem(menu, num)
 
 ObMenux.removeMenu(menu)
 
 ObMenux.createSep(self, menu, pos=None, label=None):
    creates a Separator element in menu (by ID) at pos (0-based index)
    If pos not specified, separator will be appended.
    Sets separator's label to string label, or None for no label attribute.
    (label parameter since 1.2)
	
 ObMenux.createItem(menu, label, action, execute, pos=None)
    If pos not specified, item will be appended.
	
 ObMenux.createLink(menu, mid, pos=None)
    If pos not specified, link will be appended.
	
 ObMenux.createPipe(menu, mid, label, execute, pos=None)
    If pos not specified, pipe will be appended.
	
 ObMenux.createMenu(menu, label, mid, pos=None)
    If pos not specified, menu will be appended.

 ObMenux.interchange(menu, n1, n2)
    Swaps items n1 and n2 of menu,
    where n1 and n2 are integers representing tags in the menu
    by a 0-based count (not all DOM nodes in the menu)
    True when successful
    (preserves all XML contents of items or menus moved)
    (implementation improved and return value since version 1.2)
 
 ObMenux.jumpMove(src_menu, n1, dest_menu, n2)
    Removes the source menu's n1 item, inserts copy before the destination
    menu's n2 item. If n2 is None, appends to destination menu.
    True when successful (return value since version 1.2)
    (preserves all XML contents of items or menus moved)
    (since version 1.1.1)
    (takes item nums as they were before moving even when src_menu is the same
    as dest_menu)

 ObMenux.setItemProps(menu, n, label, action, exe)
 
 ObMenux.setMenuLabel(menu, label)
 
 ObMenux.getMenuLabel(menu)
 
 ObMenux.setRefLabel(parent, link_id, label)
 	parent: ID of the parent menu
	menu_id
 ObMenux.setRefId(parent, menu_id, new_id)
 
 ObMenux.setSepLabel(self, menu, num, label=None):
		sets the label attribute of a separator
		omit label argument or pass None to remove label attribute
		(new in obmenux 1.2)
 
 --- below this line, public functions present in obmenu 1.0, but not
     documented until obmenux 1.1.25
 
 ObMenux.setMenuExecute(parent, menu_id, execute)
 
 ObMenux.getItem(menu, num)
 
 ObMenux.isMenu(menu)
    True if it's an existing menu ID
 
 ObMenux.getMenu(menu)
    Returns list of dictionaries where each dictionary has the item's
    properties. Not recursive, only one layer deep.

 ObMenux.replaceId(old_id, new_id, parent=None)
    replace all menu ID's in tree from parent matching old_id, with new_id
    leaving parent unset or None is recommended

 --- obxmlx.py version 1.3 has new functions for accessing menus by numeric
    path (a tuple) instead of by the id attribute.
    The old functions that access menus by id should not be used for invalid
    menu files (files where some menu other than an intentional link does not
    have a unique id.)

