#!/usr/bin/env bash

# al-polyzen: polybar session manager script for ArchLabs
# Copyright (C) 2017 Nathaniel Maia <natemaia10@gmail.com>

if ! hash polybar zenity find read &>/dev/null; then
	echo "[ERROR]: Missing commands required: 'polybar' 'zenity' 'readline' 'findutils'"
	exit 1
elif hash xprop >/dev/null 2>&1 && [[ $DISPLAY ]]; then
	ID="$(xprop -root -notype _NET_SUPPORTING_WM_CHECK)"
	WM="$(xprop -id "${ID##* }" -notype -len 100 -f _NET_WM_NAME 8t)"
	WM="${WM/*WM_NAME = }"
	WM="${WM/\"}"
	WM="${WM/\"*}"
	WM="${WM,,}"
fi

readonly FILES=($(find -L "$CONFPATH" -type f))
readonly TITLE="ArchLabs Polybar Manager"
readonly CONFPATH="$HOME/.config/polybar"
readonly START="$HOME/.config/openbox/autostart"
readonly ICON="--window-icon=/usr/share/icons/ArchLabs-Dark/64x64/places/distributor-logo-archlabs.png"
readonly QUESTION="zenity --question $ICON --width=300"
readonly CHECKLIST="zenity --width=400 --height=500 $ICON --list --checklist --multiple"

if [[ $WM ]]; then
	SESSIONFILE="$CONFPATH/sessions/$WM-sessionfile"
else
	SESSIONFILE="$CONFPATH/sessions/sessionfile"
fi

if [[ ! -d $CONFPATH && -d /etc/skel/.config/polybar ]]; then
	cp -rf /etc/skel/.config/polybar "$HOME/.config/"
	USER="$(whoami)"
	sed -i "s|/root|/home/$USER|g" $HOME/.config/polybar/config
	for sfile in "$HOME/.config/polybar/sessions/"*?; do
		sed -i "s|/root|/home/$USER|g" $sfile
	done
elif [[ ! -d $CONFPATH ]]; then
	mkdir -p "$CONFPATH"
	cp -f /usr/share/doc/polybar/config "$CONFPATH/config"
fi

usage() {
	cat <<EOF
USAGE: al-polyzen [OPTIONS] [SESSIONFILE]

OPTIONS:
        -z, --session    Use entered SESSIONFILE rather than default
        -h, --help       Print this usage message and exit

With no command options, the script uses the current WM-sessionfile

To start session at login, add the following line to autostart:

        sleep 1; al-polybar-session &
EOF
}


running_Bars() {
	if pidof polybar >/dev/null 2>&1; then
		TEMPFILE=$(mktemp --tmpdir polybars.XXXX)
		pgrep -a polybar >> "$TEMPFILE"
	fi
}

find_Bars() {
	fill_Arrays() {
		barPath+=("$1")
		barArray+=("$2")
		if [[ -e $TEMPFILE ]] && grep -q "$1 $2" "$TEMPFILE"; then
			checkMark+=("TRUE")
		else
			checkMark+=("FALSE")
		fi
	}

	# for every config in CONFPATH, find every bar in that config and add them to arrays
	for config in "${FILES[@]}"; do
		bar_Names=($(grep '^\[bar/.*\]$' "$config" | sed 's/]//' | cut -d '/' -f2))
		for bar in "${bar_Names[@]}"; do
			[[ $bar != "master" ]] && fill_Arrays "$config" "$bar"
		done
	done

	BARS=""
	for ((i=0; i<${#barArray[@]}; i++)); do
		BARS="$BARS ${checkMark[$i]} ${barArray[$i]}"
	done
}

create_Session() {
	mkdir -p "$CONFPATH/sessions"
	cat > "$SESSIONFILE" <<EOF
# DO NO edit this file, it will be overwritten by al-polyzen
# Instead make a custom sessionfile and use the -z FILE or --session FILE option
# To load session at startup use the following line
#     sleep 1; al-polybar-session &

EOF

	pidof polybar >/dev/null 2>&1 && pkill polybar

	for bar in $ANSWER; do
		for config in "${barPath[@]}"; do
			if grep -q "^\[bar/$bar\]" "$config" && ! grep -q "$config $bar" "$SESSIONFILE"; then
				echo "$config $bar" >> "$SESSIONFILE"
				break # after launching each bar, break back to outer loop
			fi
		done
	done

	al-polybar-session -z "$SESSIONFILE"

	sleep 0.5

	if pidof polybar >/dev/null 2>&1; then
		if [[ -f $START ]] && ! grep -q "al-polybar-session" "$START"; then
			if grep -q "polybar" "$START"; then
				sed -i '/polybar/ c sleep 1; al-polybar-session &' "$START"
			elif grep -q "tint2" "$START"; then
				sed -i '/tint2/ a sleep 1; al-polybar-session &' "$START"
				sed -i '/tint2/d' "$START"
			elif grep -q "nitrogen" "$START"; then
				sed -i '/nitrogen/ a sleep 1; al-polybar-session &' "$START"
			else
				sed -i '1s/^/sleep 1; al-polybar-session & \n/' "$START"
			fi
		fi
	fi
}

main() {
	while ! [[ $ANSWER ]]; do
		running_Bars
		find_Bars

		MSG="<big><b>Select bars to launch</b></big>\n\nRunning bars are check marked\n\nTo disable a bar:"
		MSG="$MSG <b>uncheck and click Ok</b>\n\nSession will be saved to: <b>$(basename "$SESSIONFILE")</b>\n"

		ANSWER=$($CHECKLIST --title="$TITLE" --text="$MSG" --separator=" " --column="Select" --column="Bars" $BARS)

		if [[ $? == 1 ]]; then
			ANSWER=NONE
		elif ! [[ $ANSWER ]]; then
			if [[ $(pidof polybar) ]]; then
				MSG="<big><b>No Bars Selected</b></big>\n\nWhat would you like to do?"
				if $QUESTION --title="$TITLE" --ok-label="Go Back" --cancel-label="Stop Bars" --text="$MSG" &>/dev/null; then
					ANSWER=""
					continue
				else
					pkill polybar
					echo -n "" > "$SESSIONFILE"
					ANSWER=NONE
				fi
			else
				ANSWER=NONE
			fi
		else
			create_Session
		fi

		[[ -e $TEMPFILE ]] && rm -r "$TEMPFILE"
	done
}

case $1 in
	-h|--help) usage && exit 0 ;;
	-z|--session) [[ $2 ]] && SESSIONFILE="$2" || { echo "Invalid Sessionfile.."; exit 2; }
esac

main

exit 0
